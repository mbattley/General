#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May  2 15:17:00 2019

@author: phrhzn
"""

import lightkurve
import pickle
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize
from astropy.stats import LombScargle


def fit_sin(t, y):
    '''Fit sin to the input time sequence, and return fitting parameters "amp", "omega", "phase", "offset", "freq", "period" and "fitfunc"'''
    t = np.array(t)
    y = np.array(y)
#    ff = np.fft.fftfreq(len(tt), (tt[1]-tt[0]))   # assume uniform spacing
#    Fyy = abs(np.fft.fft(yy))
#    guess_freq = abs(ff[np.argmax(Fyy[1:])+1])   # excluding the zero frequency "peak", which is related to offset
    frequency, power = LombScargle(t, y).autopower()
    index = np.argmax(power)
    guess_freq = frequency[index]
    guess_amp = np.std(y) * 2.**0.5
    guess_offset = np.mean(y)
    guess = np.array([guess_amp, 2.*np.pi*guess_freq, 0., guess_offset])

    def sinfunc(t, A, w, p, c):  return A * np.sin(w*t + p) + c
    popt, pcov = scipy.optimize.curve_fit(sinfunc, t, y, p0=guess)
    A, w, p, c = popt
    f = w/(2.*np.pi)
    fitfunc = lambda t: A * np.sin(w*t + p) + c
    return {"amp": A, "omega": w, "phase": p, "offset": c, "freq": f, "period": 1./f, "fitfunc": fitfunc, "maxcov": np.max(pcov), "rawres": (guess,popt,pcov)}


target_ID = "HIP 1113"

# Import Light-curve of interest
with open('Sector_1_target_filenames.pkl', 'rb') as f:
    target_filenames = pickle.load(f)
f.close()

if type(target_filenames[target_ID]) == str:
    filename = target_filenames[target_ID]
else:
    filename = target_filenames[target_ID][0]

# Load tpf
tpf_30min = lightkurve.search.open(filename)

# Attach target name to tpf
tpf_30min.targetid = target_ID

# Create a median image of the source over time
median_image = np.nanmedian(tpf_30min.flux, axis=0)

# Select pixels which are brighter than the 85th percentile of the median image
aperture_mask = median_image > np.nanpercentile(median_image, 85)

# Convert to lightcurve object
lc_30min = tpf_30min.to_lightcurve(aperture_mask = aperture_mask).remove_outliers(sigma = 3)
#lc_30min = lc_30min[(lc_30min.time < 1346) | (lc_30min.time > 1350)]
sigma_cut_lc_fig = lc_30min.scatter().get_figure()
plt.title('{} - 30min FFI SAP lc'.format(target_ID))
plt.show()

flux = np.array(lc_30min.flux)/np.median(lc_30min.flux)

#N, amp, omega, phase, offset, noise = 500, 1., 2., .5, 4., 3
#N, amp, omega, phase, offset, noise = 50, 1., .4, .5, 4., .2
#N, amp, omega, phase, offset, noise = 200, 1., 20, .5, 4., 1
#tt = np.linspace(0, 10, N)
#tt2 = np.linspace(0, 10, 10*N)
#yy = amp*np.sin(omega*tt + phase) + offset
#yynoise = yy + noise*(np.random.random(len(tt))-0.5)

frequency, power = LombScargle(lc_30min.time, flux).autopower()
index = np.argmax(power)
guess_freq = frequency[index]

A = 0.04
w = guess_freq*2*np.pi
c = np.mean(flux)
p = -1327.2

y_model = A * np.sin(w*lc_30min.time + p) + c

#res = fit_sin(tt, yynoise)
#res = fit_sin(lc_30min.time,flux)
#print( "Amplitude=%(amp)s, Angular freq.=%(omega)s, phase=%(phase)s, offset=%(offset)s, Max. Cov.=%(maxcov)s" % res )

plt.figure()
#plt.plot(tt, yy, "-k", label="y", linewidth=2)
plt.scatter(lc_30min.time, flux, s=2, c='k', label="y with noise")
#plt.plot(lc_30min.time, res["fitfunc"](lc_30min.flux), "r-", label="y fit curve", linewidth=2)
plt.plot(lc_30min.time, y_model, "r-", label="y model", linewidth=2)
plt.legend(loc="best")
plt.show()

residuals = flux - y_model

plt.figure()
plt.scatter(lc_30min.time, residuals, s = 2, c= 'k')